<?xml version="1.0" encoding="UTF-8"?>
<model version="5.1.4" links="0">
 <framework name="qpn"/>
 <package name="HSMs" stereotype="0x02">
  <class name="Clock_Alarm" superclass="qpn::QHsm">
   <attribute name="curr_time" type="uint32_t" visibility="0x02" properties="0x01"/>
   <attribute name="temp_time" type="uint32_t" visibility="0x02" properties="0x00"/>
   <attribute name="alarm_time" type="uint32_t" visibility="0x02" properties="0x00"/>
   <attribute name="alarm_status" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="time_mode" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="obj" type="Clock_Alarm" visibility="0x02" properties="0x01"/>
   <attribute name="temp_format" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="temp_digit" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="timeout" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="alarm_timeout" type="uint8_t" visibility="0x02" properties="0x00"/>
   <operation name="update_curr_time" type="void" visibility="0x00" properties="0x01">
    <documentation>This function will update the curren time value
</documentation>
    <code>if(++Clock_Alarm_curr_time == MAX_TIME){
    Clock_Alarm_curr_time = 0;
}</code>
   </operation>
   <operation name="get_curr_time" type="uint32_t" visibility="0x00" properties="0x01">
    <documentation>This returns the values of current time: (curr_time)</documentation>
    <code>uint8_t save_sreg = SREG;
uint32_t temp;
cli();
temp = Clock_Alarm_curr_time;
SREG = save_sreg;
return temp;</code>
   </operation>
   <operation name="set_curr_time" type="void" visibility="0x00" properties="0x01">
    <documentation>this function will set the current time with new _current time.

Note: before this you must close the interrupt rotines. (cli)

Dont forget to write the value of SREG register which is related by Interrupts 
 </documentation>
    <parameter name="new_curr_time" type="uint32_t"/>
    <code>uint8_t save_sreg;
 
save_sreg = SREG;  //take the value of SREG register
cli();             // stop the interrupts   
TCCR1B &amp;= ~(0x7U); //Stop the TIMER1
TCNT1 = 0U;    
Clock_Alarm_curr_time = new_curr_time;  //set the new current time
TCCR1B |= 0x4U;
SREG = save_sreg;        // write back the valu of SREG</code>
   </operation>
   <operation name="display_curr_time" type="void" visibility="0x00" properties="0x00">
    <documentation>/*
 * Description : Displays current time depending upon the time mode
 * param1: 'me' pointer
 * param2 : row number of the LCD
 * param3: column number of the LCD
 */</documentation>
    <parameter name="row" type="uint8_t"/>
    <parameter name="col" type="uint8_t"/>
    <code>String time_as_string;
uint32_t time_;

uint32_t time24h = Clock_Alarm_get_curr_time()/10; 
uint8_t ss = time24h % 10U;   //extract sub-second to append later
time24h /= 10U;               //convert to number of seconds 

time_ = (me-&gt;time_mode == MODE_24H)?time24h:convert_24hformat_to_12h(time24h);
time_as_string = integertime_to_string(time_); //hh:mm:ss
time_as_string.concat('.');
time_as_string.concat(ss);

/*if mode is 12H , concatenate  am/pm information */
if(me-&gt;time_mode == MODE_12H){
    time_as_string.concat(' ');
    time_as_string.concat(get_am_or_pm(time24h));
}

display_write(time_as_string,row,col);</code>
   </operation>
   <operation name="display_clock_setting_time" type="void" visibility="0x00" properties="0x00">
    <documentation>/*
 * Description : Displays current time depending upon the time mode
 * param1: 'me' pointer
 * param2 : row number of the LCD
 * param3: column number of the LCD
 */</documentation>
    <parameter name="row" type="uint8_t"/>
    <parameter name="col" type="uint8_t"/>
    <code>String time_as_string;

time_as_string = integertime_to_string(me-&gt;temp_time); //hh:mm:ss

/*concatenate  am/pm information */
if(me-&gt;temp_format != FORMAT_24H){
    time_as_string.concat(' ');
    if(me-&gt;temp_format == FORMAT_AM)
        time_as_string.concat(&quot;AM&quot;);
    else
        time_as_string.concat(&quot;PM&quot;);
}

display_write(time_as_string,row,col);</code>
   </operation>
   <statechart properties="0x01">
    <initial target="../1/2">
     <action>Clock_Alarm_set_curr_time(INITIAL_CURR_TIME);
me-&gt;alarm_time = INITIAL_ALARM_TIME;
me-&gt;time_mode = MODE_12H;
me-&gt;alarm_status = ALARM_OFF;</action>
     <initial_glyph conn="14,5,4,3,21,10">
      <action box="1,-6,28,13"/>
     </initial_glyph>
    </initial>
    <state name="Clock">
     <history type="deep" target="../2">
      <history_glyph conn="20,68,3,2,12,-18"/>
     </history>
     <tran trig="ALARM">
      <choice target="../../../2">
       <guard>((me-&gt;alarm_status == ALARM_ON) &amp;&amp; (Clock_Alarm_get_curr_time()/10 == me-&gt;alarm_time))</guard>
       <choice_glyph conn="44,114,4,0,10">
        <action box="1,0,10,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="44,108,2,-1,6">
       <action box="-3,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state name="Ticking">
      <entry brief="display_the_curr_time">Clock_Alarm_display_curr_time(me, TICKING_CURR_TIME_ROW, TICKING_CURR_TIME_COL);</entry>
      <exit>display_clear();</exit>
      <tran trig="SET" target="../../3/3">
       <action>me-&gt;temp_time = Clock_Alarm_get_curr_time()/10;
if(me-&gt;time_mode == MODE_12H){
    if(get_am_or_pm(me-&gt;temp_time).equals(&quot;AM&quot;)){
        me-&gt;temp_format = FORMAT_AM;
    }
    else{
        me-&gt;temp_format = FORMAT_PM;
    }
    me-&gt;temp_time = convert_24hformat_to_12h(me-&gt;temp_time);
}
else
    me-&gt;temp_format = FORMAT_24H;</action>
       <tran_glyph conn="62,36,1,3,22">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="OK" target="../../3/2">
       <tran_glyph conn="56,50,2,3,18,28">
        <action box="0,0,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="TICK">
       <action>Clock_Alarm_display_curr_time(me, TICKING_CURR_TIME_ROW, TICKING_CURR_TIME_COL);</action>
       <tran_glyph conn="24,44,3,-1,14">
        <action box="0,-10,26,9"/>
       </tran_glyph>
      </tran>
      <state_glyph node="24,16,38,34">
       <entry box="1,2,6,2"/>
       <exit box="1,4,6,2"/>
      </state_glyph>
     </state>
     <state name="Settings">
      <exit>display_clear();</exit>
      <tran trig="ABRT" target="../../2">
       <tran_glyph conn="72,76,3,2,-24,-26">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="OK" target="../../2">
       <tran_glyph conn="72,84,3,2,-32,-34">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state name="Alarm_Setting">
       <entry>Clock_Alarm_display_clock_setting_time(me, CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_COL);
display_cursor_on_blinkon();</entry>
       <initial target="../4">
        <initial_glyph conn="106,67,4,3,4,4">
         <action box="-4,-3,10,2"/>
        </initial_glyph>
       </initial>
       <tran trig="OK">
        <action>me-&gt;alarm_status = me-&gt;temp_digit;

if(me-&gt;temp_format != FORMAT_24H){
   me-&gt;temp_time = convert_12hformat_to_24h( me-&gt;temp_time,(time_format_t)me-&gt;temp_format);
}
me-&gt;alarm_time = me-&gt;temp_time;</action>
        <choice>
         <guard>0</guard>
         <choice_glyph conn="126,101,5,-1,8">
          <action box="1,0,10,2"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="120,105,2,-1,-4,6">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <tran trig="TICK">
        <action>Clock_Alarm_display_curr_time(me, ALARM_SETTING_STATUS_ROW, ALARM_SETTING_STATUS_COL);

if(QHsm_state(me) != Q_STATE_CAST(&amp;Clock_Alarm_alarm_on_off))
    Clock_Alarm_display_clock_setting_time(me, CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_COL);

if(QHsm_state(me) == Q_STATE_CAST(&amp;Clock_Alarm_as_hour_d1))
    display_set_cursor(CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_HOUR_D1_COL);

else if(QHsm_state(me) == Q_STATE_CAST(&amp;Clock_Alarm_as_hour_d2))
    display_set_cursor(CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_HOUR_D2_COL);

else if(QHsm_state(me) == Q_STATE_CAST(&amp;Clock_Alarm_as_min_d1))
    display_set_cursor(CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_MIN_D1_COL);

else if(QHsm_state(me) == Q_STATE_CAST(&amp;Clock_Alarm_as_min_d2))
    display_set_cursor(CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_MIN_D2_COL);

else if(QHsm_state(me) == Q_STATE_CAST(&amp;Clock_Alarm_as_sec_d1))
    display_set_cursor(CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_SEC_D1_COL);

else if(QHsm_state(me) == Q_STATE_CAST(&amp;Clock_Alarm_as_sec_d2))
    display_set_cursor(CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_SEC_D2_COL);

else if(QHsm_state(me) == Q_STATE_CAST(&amp;Clock_Alarm_as_format))
    display_set_cursor(CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_FMT_COL);

else if(QHsm_state(me) == Q_STATE_CAST(&amp;Clock_Alarm_alarm_on_off))
    display_set_cursor(CLOCK_SETTING_TIME_ROW, ALARM_SETTING_STATUS_COL);



</action>
        <tran_glyph conn="84,102,3,-1,8">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state name="as_hour_d2">
        <entry>display_set_cursor(CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_HOUR_D2_COL);
me-&gt;temp_digit = DIGIT2(GET_HOUR(me-&gt;temp_time));</entry>
        <tran trig="SET">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 10;
me-&gt;temp_time -=  DIGIT2(GET_HOUR(me-&gt;temp_time)) * 3600UL;
me-&gt;temp_time += (me-&gt;temp_digit) * 3600UL;
Clock_Alarm_display_clock_setting_time(me, CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_HOUR_D2_COL);</action>
         <tran_glyph conn="127,74,3,-1,8">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../5">
         <tran_glyph conn="143,76,1,3,4">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="127,66,16,13">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="as_hour_d1">
        <documentation>set_cursor</documentation>
        <entry>display_set_cursor(CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_HOUR_D1_COL);
me-&gt;temp_digit = DIGIT1(GET_HOUR(me-&gt;temp_time));</entry>
        <tran trig="SET">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 3;
me-&gt;temp_time -= DIGIT1(GET_HOUR(me-&gt;temp_time)) * 10UL * 3600UL;
me-&gt;temp_time += (me-&gt;temp_digit * 10UL ) * 3600UL;
Clock_Alarm_display_clock_setting_time(me, CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_HOUR_D1_COL);

</action>
         <tran_glyph conn="110,74,3,-1,5">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../3">
         <tran_glyph conn="123,76,1,3,4">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="110,66,13,12">
         <entry box="1,2,4,3"/>
        </state_glyph>
       </state>
       <state name="as_min_d1">
        <entry>display_set_cursor(CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_MIN_D1_COL);
me-&gt;temp_digit = DIGIT1(GET_MIN(me-&gt;temp_time));</entry>
        <tran trig="SET">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 6;
me-&gt;temp_time -=  DIGIT1(GET_MIN(me-&gt;temp_time))* 10UL * 60UL;
me-&gt;temp_time += (me-&gt;temp_digit)* 10UL * 60UL;
Clock_Alarm_display_clock_setting_time(me, CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_MIN_D1_COL);</action>
         <tran_glyph conn="147,74,3,-1,8">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../6">
         <tran_glyph conn="163,76,1,3,4">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="147,66,16,13">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="as_min_d2">
        <entry>display_set_cursor(CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_MIN_D2_COL);
me-&gt;temp_digit = DIGIT2(GET_MIN(me-&gt;temp_time));</entry>
        <tran trig="SET">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 10;
me-&gt;temp_time -=  DIGIT2(GET_MIN(me-&gt;temp_time)) * 60UL;
me-&gt;temp_time += (me-&gt;temp_digit) * 60UL;
Clock_Alarm_display_clock_setting_time(me, CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_MIN_D2_COL);</action>
         <tran_glyph conn="167,74,3,-1,8">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../7">
         <tran_glyph conn="175,79,2,0,5">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="167,66,16,13">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="as_sec_d1">
        <entry>display_set_cursor(CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_SEC_D1_COL);
me-&gt;temp_digit = DIGIT1(GET_SEC(me-&gt;temp_time));</entry>
        <tran trig="SET">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 6;
me-&gt;temp_time -=  DIGIT1(GET_SEC(me-&gt;temp_time)) * 10UL;
me-&gt;temp_time += (me-&gt;temp_digit) * 10UL;
Clock_Alarm_display_clock_setting_time(me, CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_SEC_D1_COL);</action>
         <tran_glyph conn="167,92,3,-1,8">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../8">
         <tran_glyph conn="167,94,3,1,-5">
          <action box="0,-1,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="167,84,16,13">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="as_sec_d2">
        <entry>display_set_cursor(CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_SEC_D2_COL);
me-&gt;temp_digit = DIGIT2(GET_MIN(me-&gt;temp_time));</entry>
        <tran trig="SET">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 10;
me-&gt;temp_time -=  DIGIT2(GET_SEC(me-&gt;temp_time));
me-&gt;temp_time += (me-&gt;temp_digit);
Clock_Alarm_display_clock_setting_time(me, CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_SEC_D2_COL);</action>
         <tran_glyph conn="146,92,3,-1,8">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../9">
         <tran_glyph conn="146,94,3,1,-5">
          <action box="0,-1,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="146,84,16,13">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="as_format">
        <entry>display_set_cursor(CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_FMT_COL);
String msg[3] = {&quot;24H&quot;,&quot;AM &quot;,&quot;PM &quot;};
display_write(msg[me-&gt;temp_format], CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_FMT_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_FMT_COL);</entry>
        <tran trig="SET">
         <action>String msg;
if(me-&gt;temp_format == FORMAT_24H){
    me-&gt;temp_format = FORMAT_AM;
    msg = &quot;AM &quot;;
}
else if(me-&gt;temp_format == FORMAT_AM){
    me-&gt;temp_format = FORMAT_PM;
    msg = &quot;PM &quot;;
}
else if (me-&gt;temp_format == FORMAT_PM){
    me-&gt;temp_format = FORMAT_24H;
    msg = &quot;24H&quot;;
}
display_write(msg, CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_FMT_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_FMT_COL);</action>
         <tran_glyph conn="125,92,3,-1,8">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK">
         <choice target="../../../10">
          <guard>is_time_set_error(me-&gt;temp_time, (time_format_t)me-&gt;temp_format)</guard>
          <choice_glyph conn="119,94,5,1,-7">
           <action box="-7,2,13,2"/>
          </choice_glyph>
         </choice>
         <choice target="../../../11">
          <guard>else</guard>
          <choice_glyph conn="119,94,4,1,-15,-13,-4,-5">
           <action box="-5,-7,6,2"/>
          </choice_glyph>
         </choice>
         <tran_glyph conn="125,94,3,-1,-6">
          <action box="0,-1,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="125,84,16,13">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="as_error">
        <entry>display_cursor_off_blinkoff();</entry>
        <exit>display_erase_block(CLOCK_SETTING_ERR_MSG_ROW, CLOCK_SETTING_ERR_MSG_COL, CLOCK_SETTING_ERR_MSG_END);
me-&gt;timeout = 0UL;</exit>
        <initial target="../3">
         <initial_glyph conn="86,96,5,2,5,-2">
          <action box="0,0,10,2"/>
         </initial_glyph>
        </initial>
        <tran trig="OK">
         <tran_glyph conn="112,96,1,-1,-9">
          <action box="-5,0,4,2"/>
         </tran_glyph>
        </tran>
        <tran trig="SET" target="../..">
         <action>display_cursor_on_blinkon();</action>
         <tran_glyph conn="105,98,2,2,7">
          <action box="0,1,10,2"/>
         </tran_glyph>
        </tran>
        <state name="as_err_on">
         <entry>display_write(&quot;Error!&quot;, CLOCK_SETTING_ERR_MSG_ROW, CLOCK_SETTING_ERR_MSG_COL);</entry>
         <tran trig="TICK">
          <action>++me-&gt;timeout;</action>
          <choice target="../../../4">
           <guard>me-&gt;timeout == 10UL</guard>
           <action>me-&gt;timeout = 0UL;</action>
           <choice_glyph conn="99,92,5,3,5">
            <action box="2,0,5,2"/>
           </choice_glyph>
          </choice>
          <tran_glyph conn="94,92,1,-1,5">
           <action box="0,0,5,2"/>
          </tran_glyph>
         </tran>
         <state_glyph node="86,87,8,7">
          <entry box="1,2,5,2"/>
         </state_glyph>
        </state>
        <state name="as_err_off">
         <entry>display_erase_block(CLOCK_SETTING_ERR_MSG_ROW, CLOCK_SETTING_ERR_MSG_COL, CLOCK_SETTING_ERR_MSG_END);</entry>
         <tran trig="TICK">
          <action>++me-&gt;timeout;</action>
          <choice target="../../../3">
           <guard>me-&gt;timeout == 10UL</guard>
           <action>me-&gt;timeout = 0UL;</action>
           <choice_glyph conn="98,85,5,0,-8,2">
            <action box="-9,-2,5,2"/>
           </choice_glyph>
          </choice>
          <tran_glyph conn="107,87,0,-1,-2,-9">
           <action box="-5,-2,5,2"/>
          </tran_glyph>
         </tran>
         <state_glyph node="104,87,8,7">
          <entry box="1,2,4,2"/>
         </state_glyph>
        </state>
        <state_glyph node="85,80,27,18">
         <entry box="1,2,6,2"/>
         <exit box="1,4,6,2"/>
        </state_glyph>
       </state>
       <state name="alarm_on_off">
        <entry>display_erase_block(ALARM_SETTING_STATUS_ROW,0,15);
me-&gt;temp_digit = 0U;
display_write(&quot;ALARM OFF&quot;,ALARM_SETTING_STATUS_ROW, ALARM_SETTING_STATUS_COL);
display_set_cursor(ALARM_SETTING_STATUS_ROW, ALARM_SETTING_STATUS_COL);</entry>
        <tran trig="SET">
         <action>if(me-&gt;temp_digit){
    display_write(&quot;ALARM OFF&quot;,ALARM_SETTING_STATUS_ROW, ALARM_SETTING_STATUS_COL);
    me-&gt;temp_digit = 0;
}
else {
    display_write(&quot;ALARM ON&quot;,ALARM_SETTING_STATUS_ROW, ALARM_SETTING_STATUS_COL);
    me-&gt;temp_digit = 1;
}

display_set_cursor(ALARM_SETTING_STATUS_ROW, ALARM_SETTING_STATUS_COL);
</action>
         <tran_glyph conn="85,75,3,-1,6">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="85,67,16,12">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state_glyph node="84,62,100,43">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <state name="Clock_Setting">
       <documentation>enter: 
 *Display temp_time
 *Cursor on
 *Blink on</documentation>
       <entry>Clock_Alarm_display_clock_setting_time(me, CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_COL);
display_cursor_on_blinkon();</entry>
       <initial target="../8">
        <initial_glyph conn="94,27,5,3,8">
         <action box="-4,-3,10,2"/>
        </initial_glyph>
       </initial>
       <tran trig="OK">
        <action>if(me-&gt;temp_format != FORMAT_24H){
    me-&gt;temp_time = convert_12hformat_to_24h( me-&gt;temp_time,(time_format_t)me-&gt;temp_format);
    me-&gt;time_mode = MODE_12H;
}else{
    me-&gt;time_mode = MODE_24H;
}

me-&gt;temp_time *= 10UL;

Clock_Alarm_set_curr_time(me-&gt;temp_time);</action>
        <choice>
         <guard>0</guard>
         <choice_glyph conn="92,58,5,-1,8">
          <action box="1,0,10,2"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="84,58,3,-1,8">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state name="cs_error">
        <entry>display_cursor_off_blinkoff();</entry>
        <exit>display_erase_block(CLOCK_SETTING_ERR_MSG_ROW, CLOCK_SETTING_ERR_MSG_COL, CLOCK_SETTING_ERR_MSG_END);
me-&gt;timeout = 0UL;</exit>
        <initial target="../4">
         <initial_glyph conn="86,53,5,2,5,-2">
          <action box="0,0,10,2"/>
         </initial_glyph>
        </initial>
        <tran trig="SET" target="../..">
         <action>display_cursor_on_blinkon();</action>
         <tran_glyph conn="92,37,0,3,-7,-8">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK">
         <tran_glyph conn="112,53,1,-1,-9">
          <action box="-5,0,4,2"/>
         </tran_glyph>
        </tran>
        <state name="cs_err_off">
         <entry>display_erase_block(CLOCK_SETTING_ERR_MSG_ROW, CLOCK_SETTING_ERR_MSG_COL, CLOCK_SETTING_ERR_MSG_END);</entry>
         <tran trig="TICK">
          <action>++me-&gt;timeout;</action>
          <choice target="../../../4">
           <guard>me-&gt;timeout == 10UL</guard>
           <action>me-&gt;timeout = 0UL;</action>
           <choice_glyph conn="98,42,5,0,-8,2">
            <action box="-9,-2,5,2"/>
           </choice_glyph>
          </choice>
          <tran_glyph conn="107,44,0,-1,-2,-9">
           <action box="-5,-2,5,2"/>
          </tran_glyph>
         </tran>
         <state_glyph node="104,44,8,7">
          <entry box="1,2,6,2"/>
         </state_glyph>
        </state>
        <state name="cs_err_on">
         <entry>display_write(&quot;Error!&quot;, CLOCK_SETTING_ERR_MSG_ROW, CLOCK_SETTING_ERR_MSG_COL);</entry>
         <tran trig="TICK">
          <action>++me-&gt;timeout;</action>
          <choice target="../../../3">
           <guard>me-&gt;timeout == 10UL</guard>
           <action>me-&gt;timeout = 0UL;</action>
           <choice_glyph conn="99,49,5,3,5">
            <action box="2,0,5,2"/>
           </choice_glyph>
          </choice>
          <tran_glyph conn="94,49,1,-1,5">
           <action box="0,0,5,2"/>
          </tran_glyph>
         </tran>
         <state_glyph node="86,44,8,7">
          <entry box="1,2,5,2"/>
         </state_glyph>
        </state>
        <state_glyph node="85,37,27,18">
         <entry box="1,2,6,2"/>
         <exit box="1,4,6,2"/>
        </state_glyph>
       </state>
       <state name="cs_hour_d2">
        <entry>display_set_cursor(CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_HOUR_D2_COL);
me-&gt;temp_digit = DIGIT2(GET_HOUR(me-&gt;temp_time));</entry>
        <tran trig="SET">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 10;
me-&gt;temp_time -=  DIGIT2(GET_HOUR(me-&gt;temp_time)) * 3600UL;
me-&gt;temp_time += (me-&gt;temp_digit) * 3600UL;
Clock_Alarm_display_clock_setting_time(me, CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_HOUR_D2_COL);</action>
         <tran_glyph conn="124,31,3,-1,8">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../5">
         <tran_glyph conn="140,33,1,3,6">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="124,23,16,13">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="cs_min_d2">
        <entry>display_set_cursor(CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_MIN_D2_COL);
me-&gt;temp_digit = DIGIT2(GET_MIN(me-&gt;temp_time));</entry>
        <tran trig="SET">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 10;
me-&gt;temp_time -=  DIGIT2(GET_MIN(me-&gt;temp_time)) * 60UL;
me-&gt;temp_time += (me-&gt;temp_digit) * 60UL;
Clock_Alarm_display_clock_setting_time(me, CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_MIN_D2_COL);</action>
         <tran_glyph conn="167,31,3,-1,8">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../9">
         <tran_glyph conn="175,36,2,0,5">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="167,23,16,13">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="cs_min_d1">
        <entry>display_set_cursor(CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_MIN_D1_COL);
me-&gt;temp_digit = DIGIT1(GET_MIN(me-&gt;temp_time));</entry>
        <tran trig="SET">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 6;
me-&gt;temp_time -=  DIGIT1(GET_MIN(me-&gt;temp_time))* 10UL * 60UL;
me-&gt;temp_time += (me-&gt;temp_digit)* 10UL * 60UL;
Clock_Alarm_display_clock_setting_time(me, CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_MIN_D1_COL);</action>
         <tran_glyph conn="146,31,3,-1,8">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../4">
         <tran_glyph conn="162,33,1,3,5">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="146,23,16,13">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="cs_format">
        <entry>display_set_cursor(CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_FMT_COL);
String msg[3] = {&quot;24H&quot;,&quot;AM &quot;,&quot;PM &quot;};
display_write(msg[me-&gt;temp_format], CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_FMT_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_FMT_COL);</entry>
        <tran trig="SET">
         <action>String msg;
if(me-&gt;temp_format == FORMAT_24H){
    me-&gt;temp_format = FORMAT_AM;
    msg = &quot;AM &quot;;
}
else if(me-&gt;temp_format == FORMAT_AM){
    me-&gt;temp_format = FORMAT_PM;
    msg = &quot;PM &quot;;
}
else if (me-&gt;temp_format == FORMAT_PM){
    me-&gt;temp_format = FORMAT_24H;
    msg = &quot;24H&quot;;
}
display_write(msg, CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_FMT_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_FMT_COL);</action>
         <tran_glyph conn="125,49,3,-1,8">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK">
         <choice target="../../../2">
          <guard>is_time_set_error(me-&gt;temp_time, (time_format_t)me-&gt;temp_format)</guard>
          <choice_glyph conn="118,51,5,1,-6">
           <action box="-6,2,13,2"/>
          </choice_glyph>
         </choice>
         <tran_glyph conn="125,51,3,-1,-7">
          <action box="0,-1,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="125,41,16,13">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="cs_sec_d2">
        <entry>display_set_cursor(CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_SEC_D2_COL);
me-&gt;temp_digit = DIGIT2(GET_MIN(me-&gt;temp_time));</entry>
        <tran trig="SET">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 10;
me-&gt;temp_time -=  DIGIT2(GET_SEC(me-&gt;temp_time));
me-&gt;temp_time += (me-&gt;temp_digit);
Clock_Alarm_display_clock_setting_time(me, CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_SEC_D2_COL);</action>
         <tran_glyph conn="146,49,3,-1,8">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../6">
         <tran_glyph conn="146,51,3,1,-5">
          <action box="0,-1,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="146,41,16,13">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="cs_hour_d1">
        <documentation>set_cursor</documentation>
        <entry>display_set_cursor(CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_HOUR_D1_COL);
me-&gt;temp_digit = DIGIT1(GET_HOUR(me-&gt;temp_time));</entry>
        <tran trig="SET">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 3;
me-&gt;temp_time -= DIGIT1(GET_HOUR(me-&gt;temp_time)) * 10UL * 3600UL;
me-&gt;temp_time += (me-&gt;temp_digit * 10UL ) * 3600UL;
Clock_Alarm_display_clock_setting_time(me, CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_HOUR_D1_COL);

</action>
         <tran_glyph conn="102,31,3,-1,8">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../3">
         <tran_glyph conn="118,33,1,3,6">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="102,23,16,13">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="cs_sec_d1">
        <entry>display_set_cursor(CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_SEC_D1_COL);
me-&gt;temp_digit = DIGIT1(GET_SEC(me-&gt;temp_time));</entry>
        <tran trig="SET">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 6;
me-&gt;temp_time -=  DIGIT1(GET_SEC(me-&gt;temp_time)) * 10UL;
me-&gt;temp_time += (me-&gt;temp_digit) * 10UL;
Clock_Alarm_display_clock_setting_time(me, CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_SEC_D1_COL);</action>
         <tran_glyph conn="167,49,3,-1,8">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../7">
         <tran_glyph conn="167,51,3,1,-5">
          <action box="0,-1,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="167,41,16,13">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state_glyph node="84,19,100,42">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <state_glyph node="72,16,113,90">
       <exit box="1,2,4,2"/>
      </state_glyph>
     </state>
     <state_glyph node="20,12,166,96"/>
    </state>
    <state name="Alarm_Notify">
     <entry>me-&gt;timeout = 0;</entry>
     <exit>display_clear();</exit>
     <initial target="../3">
      <initial_glyph conn="24,132,4,3,3,6">
       <action box="0,-3,10,2"/>
      </initial_glyph>
     </initial>
     <tran trig="OK" target="../../1" cpref="../../1/0">
      <tran_glyph conn="20,129,3,3,-6,-61,5">
       <action box="-3,0,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="TICK">
      <action>Clock_Alarm_display_curr_time(me, ALARM_SETTING_CURR_TIME_ROW, ALARM_SETTING_CURR_TIME_COL);</action>
      <choice target="../../../1/2">
       <guard>++me-&gt;alarm_timeout == 200U</guard>
       <action>me-&gt;alarm_timeout = 0U;</action>
       <choice_glyph conn="9,143,5,3,-3,-107,18">
        <action box="-8,1,20,6"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="20,143,5,-1,-11">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state name="alarm_msg_on">
      <entry>display_write(&quot;*ALARM*&quot;,ALARM_NOTIFY_MSG_ROW,ALARM_NOTIFY_MSG_COL);
do_beep();</entry>
      <tran trig="TICK">
       <action>me-&gt;timeout++;</action>
       <choice target="../../../4">
        <guard>me-&gt;timeout == 10</guard>
        <action>me-&gt;timeout = 0;</action>
        <choice_glyph conn="56,141,5,3,8">
         <action box="1,0,10,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="48,141,1,-1,8">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="30,131,18,14">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="alarm_msg_off">
      <entry>display_erase_block(ALARM_NOTIFY_MSG_ROW, ALARM_NOTIFY_MSG_COL, ALARM_NOTIFY_MSG_END);</entry>
      <tran trig="TICK">
       <action>me-&gt;timeout++;</action>
       <choice target="../../../3">
        <guard>me-&gt;timeout == 10</guard>
        <action>me-&gt;timeout = 0;</action>
        <choice_glyph conn="56,135,5,1,-8">
         <action box="1,0,10,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="64,135,3,-1,-8">
        <action box="-4,-2,5,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="64,131,18,14">
       <entry box="1,2,7,2"/>
      </state_glyph>
     </state>
     <state_glyph node="20,124,64,25">
      <entry box="1,2,6,2"/>
      <exit box="1,4,6,2"/>
     </state_glyph>
    </state>
    <state_diagram size="201,153"/>
   </statechart>
  </class>
  <attribute name="super_ClockAlarm" type="QHsm *const" visibility="0x00" properties="0x00">
   <code>=&amp;Clock_Alarm_obj.super;</code>
  </attribute>
  <operation name="Clock_Alarm_ctor" type="void" visibility="0x00" properties="0x00">
   <code>QHsm_ctor(&amp;Clock_Alarm_obj.super, Q_STATE_CAST(&amp;Clock_Alarm_initial));</code>
  </operation>
  <directory name="../src">
   <file name="ClockAlarm_SM.cpp">
    <text>#include &lt;Arduino.h&gt;
#include &quot;qpn.h&quot;
#include &quot;lcd.h&quot;
#include &quot;ClockAlarm_SM.h&quot;
#include &quot;main.h&quot;


$declare${HSMs::Clock_Alarm}

/*******************************************************/
/*********User_Function Prototypes**********************/

String get_am_or_pm(uint32_t time24h);
void  display_write(String str_, uint8_t r, uint8_t c);
String integertime_to_string(uint32_t time_);
uint32_t convert_12hformat_to_24h(uint32_t time12h, time_format_t ampm);
uint32_t convert_24hformat_to_12h(uint32_t time24h);

bool is_time_set_error(uint32_t time_,time_format_t format);
/*******************************************************/


$define${HSMs::Clock_Alarm}
$define${HSMs::super_ClockAlarm}
$define${HSMs::Clock_Alarm_ctor}


/******************INTERRUPT****************************/
ISR(TIMER1_COMPA_vect){
    Clock_Alarm_update_curr_time();

}

/*******************************************************/
/*******************************************************/
/*
 * Description : Decodes AM/PM information from given time in 24H format
 * param1: Integer time in 24H format
 * return : A string value(&quot;AM&quot; or &quot;PM&quot;)
 */
String get_am_or_pm(uint32_t time24h){
    String ampm;
    uint8_t h = GET_HOUR(time24h);
    if(h == 0U){
        ampm = &quot;AM&quot;;
    }else if( h &gt; 12U){
        ampm = &quot;PM&quot;;
    }else if (h == 12U)
        ampm = &quot;PM&quot;;
    else
        ampm = &quot;AM&quot;;
    return ampm;
}

/*******************************************************/
/*
 * Description: Writes a message to the LCD at given row and column number
 * param1 : Message to write in 'String' format
 * param2 : row number of the LCD
 * param2 : column number of the LCD
 */
void  display_write(String str_, uint8_t r, uint8_t c){
    lcd_set_cursor(c,r);
    lcd_print_string(str_);
}

/*******************************************************/
/*
 * Description: converts an 'integer' time to 'String' time
 * param1 : time represented in terms of number of seconds
 * return : time as 'String' value in the format HH:MM:SS
 */
String integertime_to_string(uint32_t time_){
    uint8_t h,m,s;
    char buf[10]; //00:00:00+null
    h = GET_HOUR(time_); /* Extract how many hours the 'time_' represent */
    m = GET_MIN(time_);  /* Extract how many minutes the 'time_' represent */
    s = GET_SEC(time_);	 /* Extract how many seconds the 'time_' represent */
    sprintf(buf,&quot;%02d:%02d:%02d&quot;,h,m,s);
    return (String)buf;
}

/*******************************************************/
/*
 * Description: Converts given integer time in 12H format to integer time 24H format
 * param1 : Integer time in 12H format
 * param2 : time format of type time_format_t
 * return : Integer time in 24H format
 */
uint32_t convert_12hformat_to_24h(uint32_t time12h, time_format_t ampm){
    uint8_t hour;
    uint32_t time24h;
    hour = GET_HOUR(time12h);
    if(ampm == FORMAT_AM){
        time24h = (hour == 12)? (time12h-(12UL * 3600UL)) : time12h;
    }else{
        time24h = (hour == 12)? time12h : (time12h +(12UL * 3600UL));
    }
    return time24h;
}

/*******************************************************/
/*
 * Description: Converts given integer time in 24H format to integer time 12H format
 * param1 : Integer time in 24H format
 * return : Integer time in 12H format
 */
uint32_t convert_24hformat_to_12h(uint32_t time24h){
    uint8_t hour;
    uint32_t time12h;
    hour = GET_HOUR(time24h);

    if(hour == 0)
        time12h = time24h + (12UL * 3600UL);
    else{
        if((hour &lt; 12UL) || (hour == 12UL))
            return time24h;
        else
            time12h = time24h - (12UL * 3600UL);
    }
    return time12h;
}
/*******************************************************/
/*******************************************************/

bool is_time_set_error(uint32_t time_,time_format_t format){
    uint8_t h = GET_HOUR(time_);
    return ((h &gt; 23) || ((h &gt; 12 || (h == 0))&amp;&amp; format != FORMAT_24H) );
}
</text>
   </file>
   <file name="ClockAlarm_SM.h">
    <text>#ifndef CLOCK_ALARM_H
#define CLOCK_ALARM_H


enum ClockAlarm_Signals{
    SET_SIG = Q_USER_SIG,
    OK_SIG,
    ABRT_SIG,
    ALARM_SIG,
    TICK_SIG,
    IGNORE_SIG,
    MAX_SIG,    
};
/******************************************/

enum time_mode{
    MODE_12H,
    MODE_24H,
};
/******************************************/

enum alarm_status{
    ALARM_OFF,
    ALARM_ON,
};
/******************************************/

typedef enum {
    FORMAT_24H,
    FORMAT_AM,
    FORMAT_PM,
}time_format_t;
/******************************************/

#define GET_HOUR(seconds)    ((seconds / 3600UL))
#define GET_MIN(seconds)     ((seconds / 60UL) % 60UL)
#define GET_SEC(seconds)     ((seconds % 60UL))
#define DIGIT1(d)            (d / 10U)
#define DIGIT2(d)            (d % 10U)
/******************************************/

#define MAX_TIME   (864000UL)   // 24hours x 60 min x 60 sec x 10ssec  = 864000sn

#define INITIAL_CURR_TIME    (((10UL * 3600UL) + (10UL * 60UL) + (10UL)) *10) 
#define INITIAL_ALARM_TIME   ((10UL * 3600UL) *10)
/******************************************/

#define TICKING_CURR_TIME_ROW 0
#define TICKING_CURR_TIME_COL 3
/******************************************/

#define CLOCK_SETTING_TIME_ROW 0
#define CLOCK_SETTING_TIME_COL 2
/******************************************/

#define CLOCK_SETTING_TIME_HOUR_D1_COL 2   // (0,2)
#define CLOCK_SETTING_TIME_HOUR_D2_COL 3   // (0,3)
#define CLOCK_SETTING_TIME_MIN_D1_COL  5   // (0,5)
#define CLOCK_SETTING_TIME_MIN_D2_COL  6   // (0,6)
#define CLOCK_SETTING_TIME_SEC_D1_COL  8   // (0,8)
#define CLOCK_SETTING_TIME_SEC_D2_COL  9   // (0,9)
/******************************************/

#define CLOCK_SETTING_TIME_FMT_COL    11
/******************************************/

#define CLOCK_SETTING_ERR_MSG_ROW   1
#define CLOCK_SETTING_ERR_MSG_COL   4
#define CLOCK_SETTING_ERR_MSG_END   9
/******************************************/

#define ALARM_SETTING_CURR_TIME_ROW     1
#define ALARM_SETTING_CURR_TIME_COL     2
#define ALARM_SETTING_STATUS_ROW        0
#define ALARM_SETTING_STATUS_COL        4
/******************************************/

#define ALARM_NOTIFY_MSG_ROW   0
#define ALARM_NOTIFY_MSG_COL   4
#define ALARM_NOTIFY_MSG_END   9
/******************************************/

#define CS_ROW 0
#define CS_HOUR_D1_COL  2
/******************************************/


$declare${HSMs::Clock_Alarm_ctor}
$declare${HSMs::super_ClockAlarm}


#endif </text>
   </file>
  </directory>
 </package>
</model>
